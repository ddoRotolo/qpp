#!/usr/bin/env bash

# By Daniel O.

#(un)license
#   This is free and unencumbered software released into the public domain.

#   Anyone is free to copy, modify, publish, use, compile, sell, or
#   distribute this software, either in source code form or as a compiled
#   binary, for any purpose, commercial or non-commercial, and by any
#   means.

#   In jurisdictions that recognize copyright laws, the author or authors
#   of this software dedicate any and all copyright interest in the
#   software to the public domain. We make this dedication for the benefit
#   of the public at large and to the detriment of our heirs and
#   successors. We intend this dedication to be an overt act of
#   relinquishment in perpetuity of all present and future rights to this
#   software under copyright law.

#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#   OTHER DEALINGS IN THE SOFTWARE.

#   For more information, please refer to <http://unlicense.org/>

#Config
FOLDER=~/.postits
MENU=slmenu


usage () {
    cat << __USAGE__
Name
    qpp - Quick Postit Program

Synopsis
    qpp [new|add|get|rm|dir] [target]
    qpp [ls|sel]

Description
    qpp is a program for very quickly making a note from the terminal.
    It is literally a wrapper around 'cat - > file' with some extra
    commands to make things easier

    If no target is specified, the file defaults to 'last'
    If no option is specified, the action defaults to add.

Options
    new: 
        Creates a new postit. Everything written into stdin is placed into
        the target file, overwriting the old post

    add:
        Adds more text to the target post, or creates it if it doesn't exist.

    get: Fetches the text from the target post

    rm: Deletes the target post

    dir: 
        Creates a directory with the target name. 
        Fails if you try to overwrite the default post file.

    ls: Lists all creates posts and folders

    sel: 
        Uses a menu program to dynamically fetch a post
        slmenu is used by default, but dmenu or any other menu 
        like it could be used.
__USAGE__
}

ACTION=$1
POST=$2 

if [ -z "$ACTION" ]
then
    ACTION="add"
fi

if [ -z "$POST" ]
then
    POST="last"
fi

if [ ! -d "$FOLDER" ]
then
    mkdir "$FOLDER"
fi

case $ACTION in
    "new")
        cat - >  "$FOLDER/$POST"
        ;;
    "add")
        cat - >> "$FOLDER/$POST"
        ;;
    "get")
        cat "$FOLDER/$POST"
        ;;
    "rm")
        rm -rf "$FOLDER/$POST"
        ;;
    "dir")
        if [ "$POST" ==  "last" ]
        then
            echo "You can't make a directory with that name"
        else
            mkdir "$FOLDER/$POST"
        fi
        ;;
    "ls")
        ls -R --color "$FOLDER"
        ;;
    "sel")
        if command -v slmenu
        then
            pushd $FOLDER > /dev/null
            cat $(find . -type f | $MENU)
            popd > /dev/null
        else
            echo "$MENU is needed in order to run the sel command"
        fi
        ;;
    *)
        usage 
esac
